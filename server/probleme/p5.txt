#BEGIN_PROBLEM
#include <iostream>
using namespace std;

void f(int x, int y) {
	cout << "x = " << x << " si y = " << y << endl;
	cout << "Prima functie!" << endl;
	int z = x + y;
}

void f(double x, int y) {
	double z = x + x;
	cout << "Dublul lui x = " << z << endl;
	cout << "A doua functie!" << endl;
	z = x - 20.0;
}

int main() {
	float x = 5;
	int y = 2;
	f(x, y);
}
#END_PROBLEM


#BEGIN_SOLUTION
<div>
Programul functioneaza corect. Se afiseaza:
</div>
<output>
Dublul lui x = 10
A doua functie!
</output>
<div>
Poate te-a luat prin surprindere ca este corect. Avem functia f care este supraincarcata <inline>void f(int x, int y)</inline> si <inline>void f(double x, int y)</inline>. In main apelam functia f cu un <inline>float</inline> si cu un <inline>int</inline>.
</div>
<div>
<inline>void f(int x, int y)</inline> trebuie sa converteasca <inline>float</inline> la <inline>int</inline> iar <inline>void f(double x, int y)</inline> trebuie sa converteasca <inline>float</inline> la <inline>double</inline>. Ambele fac o singura conversie de ce nu este ambiguu apelul <inline>f(x, y);</inline>?
</div>
<div>
Pentru ca aceste conversii si ele de mai multe feluri, unele mai importante decat celelalte si asta contribuie la ce functie se alege in cazul asta.
Conversia de la <inline>float</inline> la <inline>double</inline> are un nume special putin, se numeste &quot;<b>promotie</b>&quot; (floating-point promotion). Conversia de la <inline>int</inline> la <inline>double</inline> se numeste tot &quot;<b>conversie</b>&quot; (floating-point conversion). 
</div>
<div>
Promotia se refera ca poti reprezenta si pastra exact informatia din tipul care se converteste in tipul convertit fara sa pierzi informatia. (de ex din <inline>float</inline> in <inline>double</inline> sau din <inline>short</inline> in <inline>int</inline>). Cand faci o conversie s-ar putea sa pierzi infomatia sau sa se modifice(de ex din <inline>int</inline> in <inline>float</inline>, pentru ca exista numere intregi care nu se reprezinta exact cu un <inline>float</inline> ). Ai grija ca conversia din <inline>int</inline> in <inline>long</inline> sau <inline>long long</inline> (dar si altele) <b>NU</b> sunt promotii, sunt conversii. Pentru mai multe detalii citeste <a href='./tips.html#function-overloading'>aici</a>.
</div>
<div>
In cazul asta se face o conversie in cazul primei functii si o promotie in cazul celei de a doua functii, si cum promotia este mai puternica nu mai exista ambiguitate si prin <inline>f(x,y);</inline> apelezi a doua functie. 
</div>

#END_SOLUTION


#BEGIN_TAGS
correct, easy, function overloading, implicit cast
#END_TAGS