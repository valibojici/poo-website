#BEGIN_PROBLEM
#include <iostream>
using namespace std;

int main() {
	int *n, *nr, *s;

	cout << "Cate numere sunt?" << endl;
	n = new int;
	cin >> *n;	// 5

	nr = new int[*n];

	cout << "Introdu numerele" << endl;
	for (int i = 0; i < *n; ++i) {
		cin >> nr[i]; // 1 2 3 4 5
	}

	s = new int(0);
	for (int i = 0; i < *n; ++i) {
		*s += nr[i];
	}

	cout << "Suma este: " << *s << endl;

	delete n;
	delete s;
	delete nr;
}
#END_PROBLEM


#BEGIN_SOLUTION
<div>
Daca se citeste de la tastatura <inline>1</inline> si dupa <inline>1 2 3 4 5</inline> se afiseaza:
</div>
<output>
Cate numere sunt?
5
Introdu numerele
1 2 3 4 5
Suma este: 15
</output>
<div>
Probabil va functiona corect daca incerci, dar la linia 27: <inline>delete nr;</inline> nu e corect. Cand aloci dinamic memorie cu <inline>new</inline>, eliberezi memoria cu <inline>delete</inline> iar cand aloci memorie cu <inline>new[]</inline> eliberezi cu <inline>delete[]</inline>. In cazul asta <inline>nr</inline> e un array alocat dinamic si trebuie eliberata memoria cu <inline>delete[]</inline> nu cu <inline>delete</inline>. Daca folosesti <inline>delete</inline> pentru un array ce se intampla e <i>undefined behaviour</i>, adica depinde de compilator ce se intampla, poate nimic, poate ceva grav care nu va genera eroare dar va face programul sa nu functioneze corect mai tarziu. Deci corect ar fi sa inlocuiesti <inline>delete nr;</inline> cu <inline>delete[] nr;</inline>
</div>
<div>
<inline>s = new int(0);</inline> inseamna ca aloci dinamic un <inline>int</inline> si ii dai valoarea 0. Poti pune si alte numere. 
</div>
<div>
Cand aloci dinamic un array de ex. <inline>int *s = new int[10];</inline> si vrei ca elementele sa fie 0 poti scrie direct <inline>int *s = new int[10]()</inline>, nu pune nimic intre paranteze.
</div>
#END_SOLUTION


#BEGIN_TAGS
easy, incorrect, pointers, dynamic memory allocation
#END_TAGS