#BEGIN_PROBLEM
#include <iostream>
using namespace std;

int main() {
	int x = 123, y = 456;
	int& rx = x;
	rx = 50;
	
	int* p = &rx;
	int*& rp = p;

	*rp = 100;
	p = &y;
	*rp = 200;

	cout << x << ' ' << y << endl;
}
#END_PROBLEM


#BEGIN_SOLUTION
<div>
Programul functioneaza corect. Se afiseaza:
</div>
<output>
100 200
</output>
<div>
Avem doua variabile <var>x</var> si <var>y</var> si o referinta la <var>x</var>. <inline>rx = 50;</inline> este de fapt <inline>x = 50;</inline> pentru ca referinta este ca un alias pentru variabila <var>x</var>. Dupa avem un pointer care arata spre adresa de memorie lui <var>rx</var> care este de fapt adresa de memorie lui <var>x</var> pentru ca referintele nu ocupa memorie. Dupa la linia 10: <inline>int*& rp = p;</inline> se creeaza o referinta la pointerul <var>p</var>. Deci acum <var>rp</var> este practic <var>p</var>. <inline>*rp = 100;</inline> este ca si cum ai scrie <inline>*p = 100;</inline>. Adica dereferentiezi pointerul <var>p</var> ca sa ai acces la zona din memorie la care arata, adica la variabila <var>x</var> a carui valorea este modificata in 100.
</div>
<div>
Apoi <var>p</var> arata acum spre zona din memorie unde este <var>y</var>. <var>rp</var> continua sa fie o referinta la <var>p</var> deci <inline>*rp = 200;</inline> este practic <inline>*p = 200;</inline> adica prin <var>p</var> accesezi variabila <var>y</var> a carui valoare o schimbi in 200.
</div>
#END_SOLUTION


#BEGIN_TAGS
easy, pointers, references, correct
#END_TAGS