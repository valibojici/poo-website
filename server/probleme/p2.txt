#BEGIN_PROBLEM
#include <iostream> 
using namespace std;

void f(double x, int y) {
	cout << "x * y =" << x + y << endl;
}

void f(int x, double y) {
	cout << "x + y =" << x + y << endl;
}

int main()
{
	f(1, 2);
	f(1.5, 2);
	return 0;
}
#END_PROBLEM

#BEGIN_SOLUTION
<div>
Programul nu functioneaza corect. Avem eroare de compilare la linia 14: <inline>f(1, 2);</inline>
</div>
<error>
more than one instance of overloaded function "f" matches the argument list
</error>
<div>
De ce avem eroare? In primul rand functia f este supraincarcata. Daca ne uitam la linia 14: <inline>f(1, 2);</inline> ambele argumente sunt de tip <inline>int</inline>. Acum sa ne uitam la functii: <inline>void f(double x, int y)</inline> si <inline>void f(int x, double y)</inline>. Prima functie trebuie sa converteasca primul argument (adica 1) din <inline>int</inline> in <inline>double</inline>, a doua functie nu trebuie sa faca nimic.
</div>
<div>
Acum, prima functie nu trebuie sa mai faca nimic pentru al doilea argument (adica 2) pentru ca e deja <inline>int</inline> in schimb a doua funtie trebuie sa convertesca din <inline>double</inline> in <inline>int</inline>.
</div>
<div>
In concluzie ambele functii trebuie sa faca o conversie obligatoriu, deci apelul functiei f este ambiguu, nu se stie care functie sa se apeleze. Ca programul sa fie corect sunt mai multe variante:
</div>
<div>
1) schimbi linia 15 din <inline>f(1, 2);</inline> in <inline>f(1.0, 2);</inline> de exemplu (sa fie un double ca prim argument) sau in <inline>f(1, 2.0);</inline>. Ai grija ca ceva de genul <inline>f(1.3, 2.1);</inline> da aceeasi eroare.
</div>
<div>
2) schimbi linia 4: <inline>void f(double x, int y) {</inline> in <inline>void f(int x, int y){</inline>
</div>
<div>
3) schimbi linia 8: <inline>void f(int x, double y) {</inline> in <inline>void f(double x, double y) {</inline> sau <inline>void f(int x, int y) {</inline>
</div>
#END_SOLUTION

#BEGIN_TAGS
incorrect, function overloading, implicit cast, easy
#END_TAGS