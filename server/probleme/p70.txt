#BEGIN_PROBLEM
#include <iostream>
using namespace std;

template<class X>
void test(X& a, X& b){
    X temp;
    temp = a;
    a = b;
    b = temp;
    cout << "ttest\n";
}
void test(int& c, int& d){
    int temp;
    temp = c;
    c = d;
    d = temp;
    cout << "test 1\n";
}
void test(int e, int f){
    int temp;
    temp = e;
    e = f;
    f = temp;
    cout << "test 2\n";
}
void test(int g, int* h){
    int temp;
    temp = g;
    g = *h;
    *h = temp;
    cout << "test 3\n";
}

int main()
{
    int a = 5, b = 15, c = 25, *d = &a;
    test(a, b);
    test(c, d);
    return 0;
}
#END_PROBLEM


#BEGIN_SOLUTION
<div>
Programul nu functioneaza corect, avem eroare de compilare la linia 36: <inline>test(a, b);</inline>
</div>
<error>
more than one instance of overloaded function "test" matches the argument list
</error>
<div>
Cum spune si eroarea, se potrivesc mai multe functii si nu se stie care sa se aleaga.
</div>
<div>
La <inline>test(a, b);</inline> se potriveste si functia <inline>void test(int e, int f)</inline> si functia <inline>void test(int& c, int& d)</inline> (pentru ca poti transmite parametrii ori prin referinta ori prin valoare). Cealalta functia non-template are un parametru de tip pointer si iese din discutie. La fel si cea template pentru ca am gasit macar 1 functie non-template care se potriveste.
</div>
<div>
Ca programul sa fie corect am putea schimba linia 36 cu <inline>f(a, 2);</inline> de exemplu sau <inline>f(2, 3);</inline> (sa apara o valoare in loc de unul sau ambele argumente). Ca sa transmiti ceva prin referinta trebuie sa fie stocat in memorie, un numar ca <inline>2</inline> sau <inline>-10</inline> nu este stocat in memorie (spre deosebire de variabila <var>b</var> de exemplu). Deci la <inline>f(a, 2);</inline> doar functia <inline>void test(int e, int f)</inline> se potriveste.
</div>
<div>
Alta varianta e sa schimbi ceva (tipurile parametriilor; ordinea parametriilor, cand ai parametrii de mai multe tipuri; numarul parametriilor) la una din functiile care se potrivesc (<inline>void test(int e, int f)</inline> si <inline>void test(int& c, int& d)</inline>) ca una din ele sa nu se mai potriveasca. <b>Tipul returnat nu conteaza.</b>. Am putea schimba functia <inline>void test(int e, int f)</inline> in <inline>void test(int e, int f, int g)</inline> si acum nu se mai potriveste.
</div>
<div>
La <inline>test(c, d);</inline>, <var>c</var> e de tip <inline>int</inline> si <var>d</var> e de tip <inline>int*</inline>. Se potriveste functia non-template <inline>void test(int g, int* h)</inline> (ultima) deci functia template iese din discutie (se prefera mereu ceva non-template si oricum functia template nici nu s-ar potrivi pentru ca ambii parametrii trebuie sa fie de acelasi tip, aici avem <inline>int</inline> si <inline>int*</inline>).
</div>
#END_SOLUTION


#BEGIN_TAGS
medium, incorrect, template, function overloading, pointers
#END_TAGS