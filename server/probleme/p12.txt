#BEGIN_PROBLEM
#include <iostream>
using namespace std;

int main()
{
	int N = 99, M = 2;
	int v[] = { 10, 20, N, M };

	int(*p1)[4] = &v;
	int* p2 = v;

	p1++;
	p2++;
	cout << (*p1)[1] << " " << p2[1];
}
#END_PROBLEM


#BEGIN_SOLUTION
<div>
Programul nu functioneaza corect. Nu avem eroare de compilare dar posibil eroare la runtime pentru ca accesam memorie unde nu trebuie.
</div>
<div>
Deci avem un array <inline>v[] = {10, 20, 99, 2};</inline> (am pus direct valorile lui <var>N</var> si <var>M</var>). La linia 9: <inline>int(*p1)[4] = &v;</inline> se creeaza un pointer cu numele <var>p1</var> de tip <inline>int(*)[4]</inline> care arata spre un array cu 4 elemente, in cazul asta <var>v</var>. Deci <var>p1</var> arata spre intreg array-ul <var>v</var>. 
</div>
<div>
Cand scrii <inline>int* p2 = v;</inline> este ca si cum ai scrie <inline>int* p2 = &v[0];</inline>. (se produce un &quot;decay&quot;, array-ul se transforma intr-un pointer la primul element, <var>v</var> nu este de tip <inline>int*</inline> ci <inline>int[4]</inline> dar totusi poti scrie <inline>int* p2 = v;</inline>). Deci <var>p2</var> este un pointer la primul element.
</div>
<div>
Deci <var>p2</var> este un pointer de tip <inline>int</inline> la primul element din array-ul <var>v</var>, iar <var>p1</var> este un pointer de tip <inline>int[4]</inline> la intreg array-ul v. Deocamdata ambii pointeri arata spre aceeasi zona de memorie (inceputul array-ului) dar sunt de tipuri <b>diferite</b>.
</div>
<div>
Acum urmeaza partea care nu e corecta. Operatiile aritmetice cu pointeri se folosesc de tipul lor. Un <inline>int</inline> are 4 bytes si <var>p2</var> este de tip <inline>int*</inline> deci <inline>p2++;</inline> inseamna ca adresa la care arata p2 se mareste cu 4 bytes adica trece la urmatorul numar din array-ul <var>v</var> adica <inline>20</inline>. Insa <inline>p1++;</inline> mareste adresa lui p1 cu 4*4=16 bytes (dimensiunea lui <inline>int[4]</inline>) deci ajunge <b>dupa</b> zona de memorie rezervata pentru array-ul <var>v</var>. Cand scrii <inline>(*p1)[1]</inline> si dereferentiezi <var>p1</var> obtii ceva de tip <inline>int[4]</inline> adica un array, dar array-ul asta e dupa zona de memorie a lui <var>v</var> daca incerci sa accesezi primul element obtii o valoare random din memorie sau intri peste memorie deja alocata si ai eroare. Este corect sa scrii <inline>p2[1]</inline> pentru ca inseamna de fapt <inline>*(p2 + 1)</inline> adica urmatorul nr din array-ul <var>v</var> dupa <inline>20</inline> adica 99.
</div>
<div>
Deci ca sa fie corect stergi linia 12: <inline>p1++;</inline>. Sau ai putea inlocui linia 15: cu <inline>cout << (*(p1-1))[1] << " " << p2[1];</inline>. <inline>p1-1</inline> inseamna practic ca te intorci la adresa la care se afla <var>v</var>. Ca sa ai acces la array trebuie sa deferentiezi pointerul adica <inline>*(p1-1)</inline> si pentru ca <inline>[]</inline> are precedenta mai mare mai trebuie niste paranteze <inline>(*(p1-1))[1]</inline> si asta inseamana practic <inline>v[1]</inline>.
</div>
#END_SOLUTION


#BEGIN_TAGS
incorrect, easy, pointers, array
#END_TAGS