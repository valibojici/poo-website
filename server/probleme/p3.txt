#BEGIN_PROBLEM
#include <iostream> 
using namespace std;

int f(int x, int y) {
	cout << "Salut din prima functie" << endl;
	return x + y;
}

double f(int y, int x) {
	cout << "Salut din a doua functie" << endl;
	return 10.0;
}

int main()
{
	f(2, 2);
	f(2.5, 3);
	return 0;
}
#END_PROBLEM

#BEGIN_SOLUTION
<div>
Programul nu funtioneaza corect. Avem eroare de compilare la linia 9: <inline>double f(int y, int x) {</inline>
</div>
<error>
cannot overload functions distinguished by return type alone
</error>
<div>
Pare ca functia f este supraincarcata dar nu este asa. Ca sa supraincarci o functie trebuie sa schimbi ori numarul de parametrii ori tipul parametrilor ori ordinea parametrilor (daca ai parametrii cu tipuri diferite) si cateva alte lucruri pe care la discut <a href='./tips.html#function-overloading'> aici</a>.
</div>
<div>
Deci functiile <inline>int f(int x, int y)</inline> si <inline>double f(int y, int x)</inline> se deosebesc doar prin tipul returnat, care nu este destul pentru a le diferentia (am schimbat si <var>x</var> cu <var>y</var> in a doua functie dar asta nu are nicio treaba, sunt doar niste nume, tot doi parametrii de tip <inline>int</inline> avem). De ce nu se deosebesc prin tipul returnat? Pentru ca exista situatii de genul urmator:
</div>
<div>
<block>
#include <iostream> 
using namespace std;

int calculeazaPret(int pret, float TVA){
	return pret + TVA * pret / 100;
}

float calculeazaPret(int pret, float TVA){
	return pret + TVA * pret / 100;
}

int main()
{
	double x = calculeazaPret(100, 4);
	cout << x << endl;
}
</block>
</div>
<div>
Aici si <inline>int</inline> si <inline>float</inline> se poate converti la <inline>double</inline> deci la linia <inline>double x = calculeazaPret(100, 4);</inline> care functie se apeleaza? Ca sa se evite situatii de genul asta fara sens, tipul returnat nu e destul pentru a face diferenta.
</div>
<div>
Ca programul sa fie corect trebuie schimbata linia 9: <inline>double f(int y, int x) {</inline> in ceva de genul <inline>double f(double y, int x) {</inline> de exemplu.
</div>
#END_SOLUTION
#BEGIN_TAGS
easy, incorrect, function overloading, function signature
#END_TAGS